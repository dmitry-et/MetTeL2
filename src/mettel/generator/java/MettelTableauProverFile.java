/**
 * MetTeL is a tableau prover generator.
 * Copyright (C) 2009-2011 Dmitry Tishkovsky
 *
 * This file is part of MetTeL.
 *
 * MetTeL is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version with the additional term
 * that all the references to the MetTeL original author,
 * Dmitry Tishkovsky, must be retained.
 *
 * MetTeL is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with MetTeL.  If not, see <http://www.gnu.org/licenses/>.
 */
package mettel.generator.java;

import mettel.util.MettelJavaNames;

/**
 * @author Dmitry Tishkovsky
 * @version $Revision$ $Date$
 *
 */
public class MettelTableauProverFile extends MettelJavaClassFile {

	private String prefix = "Mettel";

	private MettelJavaPackageStructure pStructure = null;

	public MettelTableauProverFile(String prefix, String sort, String branchBound, MettelJavaPackageStructure pStructure) {
		super(prefix+"TableauProver", pStructure.basePackage(), "public", null, null);
		this.pStructure = pStructure;
		this.prefix = prefix;

		body(sort, branchBound);

		if(branchBound != null){
			headings.appendLine("import mettel.core.tableau.acceptor.MettelSmallTableauStateAcceptor;");
		}
	}

	protected void imports(){
		headings.appendLine("import java.util.ArrayList;");
		headings.appendLine("import java.util.LinkedHashSet;");
		headings.appendLine("import java.io.PrintWriter;");
		headings.appendLine("import java.io.FileWriter;");
		headings.appendLine("import java.io.OutputStreamWriter;");
		//headings.appendLine("import java.io.IOException;");

		headings.appendLine("import org.antlr.runtime.ANTLRFileStream;");
		headings.appendLine("import org.antlr.runtime.ANTLRInputStream;");
		headings.appendLine("import org.antlr.runtime.CharStream;");
		headings.appendLine("import org.antlr.runtime.CommonTokenStream;");
		//headings.appendLine("import org.antlr.runtime.RecognitionException;");

		headings.appendLine("import mettel.core.tableau.MettelSimpleTableauManager;");
		headings.appendLine("import mettel.core.tableau.MettelGeneralTableauRule;");
		headings.appendLine("import mettel.core.tableau.MettelTableauObjectFactory;");
		//headings.appendLine("import mettel.core.tableau.acceptor.MettelSmallTableauStateAcceptor;");

		headings.appendLine("import "+pStructure.languagePackage().path()+".*;");
		headings.appendEOL();
	}

	private void body(String sort, String branchBound){

		appendLine("final private static CommonTokenStream tokens = new CommonTokenStream();");
		appendLine("final private static "+prefix+"Parser parser = new "+prefix+"Parser(tokens);");
		appendEOL();
		appendLine("private static PrintWriter out = null;");
		appendLine("private static PrintWriter err = null;");
		appendLine("private static CharStream in = null;");
		appendLine("private static String outFileName = null;");
		appendLine("private static String tableauFile = null;");
		appendEOL();
		appendLine("public static void main(String[] args) {");
			incrementIndentLevel();
			appendLine("System.out.println(\"-------------------------------------------------------------------\");");
			appendLine("System.out.println(\"Hello there! I am an automated tableau prover for "+prefix+" logic.\");");
			appendLine("System.out.println(\"I am generated by MetTeL, an automated tableau prover generator,\");");
			appendLine("System.out.println(\"which is designed and implemented by Dmitry Tishkovsky.\");");
			appendLine("System.out.println(\"As a program, I have ABSOLUTELY NO WARRANTY.\");");
			appendLine("System.out.println(\"-------------------------------------------------------------------\");");
			appendLine("try{");
				incrementIndentLevel();
				appendLine("final int SIZE = args.length;");
				appendLine("for(int i = 0; i < SIZE; i++){");
					incrementIndentLevel();
					appendLine("if(\"-i\".equals(args[i])||\"--input\".equals(args[i])){");
						incrementIndentLevel();
						appendLine("if(i < SIZE-1){");
							incrementIndentLevel();
							appendLine("in = new ANTLRFileStream(args[++i]);");
							appendLine("System.out.println(\"Input file: \"+args[i]);");
							decrementIndentLevel();
						appendLine("}else{");
							incrementIndentLevel();
							appendLine("System.out.println(\"I need a name of input file.\");");
							appendLine("System.exit(-1);");
							decrementIndentLevel();
	                    appendLine('}');
	                    decrementIndentLevel();
	               appendLine("}else if(\"-o\".equals(args[i])||\"--output\".equals(args[i])){");
	               		incrementIndentLevel();
	               		appendLine("if(i < SIZE-1){");
	               			incrementIndentLevel();
	               			appendLine("outFileName = args[++i];");
	               			appendLine("out = new PrintWriter(new FileWriter(outFileName),true);");
	               			appendLine("System.out.println(\"Output file: \"+outFileName);");
	               			decrementIndentLevel();
	               		appendLine("}else{");
	               			incrementIndentLevel();
	               			appendLine("System.out.println(\"I need a name of file for my output.\");");
	               			appendLine("System.exit(-1);");
	               			decrementIndentLevel();
	               		appendLine('}');
	               		decrementIndentLevel();
	               	appendLine("}else if(\"-e\".equals(args[i])||\"--error\".equals(args[i])){");
	               		incrementIndentLevel();
	               		appendLine("if(i < SIZE-1){");
	               			incrementIndentLevel();
	               			appendLine("err = new PrintWriter(new FileWriter(args[++i]),true);");
	               			appendLine("System.out.println(\"Using error file: \"+args[i]);");
	               			decrementIndentLevel();
	               		appendLine("}else{");
	               			incrementIndentLevel();
	               			appendLine("System.out.println(\"I need a name of file for output about my errors.\");");
	               			appendLine("System.exit(-1);");
	               			decrementIndentLevel();
	               		appendLine('}');
	                    decrementIndentLevel();
	                appendLine("}else if(\"-t\".equals(args[i])||\"--tableau\".equals(args[i])){");
	                	incrementIndentLevel();
	                	appendLine("if(i < SIZE-1){");
	                		incrementIndentLevel();
	                		appendLine("tableauFile = args[++i];");
	                		appendLine("System.out.println(\"Tableau file: \"+tableauFile);");
	                		decrementIndentLevel();
	                	appendLine("}else{");
	                		incrementIndentLevel();
	                		appendLine("System.out.println(\"I need a name of file with a tableau calculus.\");");
	                		appendLine("System.exit(-1);");
	                		decrementIndentLevel();
	                	appendLine('}');
	                    decrementIndentLevel();
	                appendLine('}');
	                decrementIndentLevel();
	            appendLine('}');

	            appendLine("CharStream tin = (tableauFile == null)?");
	            	incrementIndentLevel();
	            	appendLine("new ANTLRInputStream("+prefix+"TableauProver.class.getResourceAsStream(\"/"+
	            			MettelJavaNames.javaPath(pStructure.tableauPackage().path()+".calculus")+"\")):");
	            	appendLine("new ANTLRFileStream(tableauFile);");
	            	decrementIndentLevel();

	            appendLine("tokens.setTokenSource(new "+prefix+"Lexer(tin));");

	            appendLine("LinkedHashSet<MettelGeneralTableauRule> calculus = new LinkedHashSet<MettelGeneralTableauRule>();");
	            appendLine("parser.tableauCalculus(calculus);");

	            appendLine("if(in == null) in = new ANTLRInputStream(System.in);");

	            appendLine("tokens.setTokenSource(new "+prefix+"Lexer(in));");
       		    appendLine("ArrayList<"+prefix+MettelJavaNames.firstCharToUpperCase(sort)+
    		    		"> list = new ArrayList<"+prefix+MettelJavaNames.firstCharToUpperCase(sort)+">();");
    		    appendLine("parser."+sort+"s(list);");

    		    appendLine("if(out == null) out = new PrintWriter(new OutputStreamWriter(System.out),true);");
    		    appendLine("if(err == null) err = new PrintWriter(new OutputStreamWriter(System.err),true);");

    		    appendLine("MettelTableauObjectFactory tfactory = new "+prefix+"TableauObjectFactory();");
    		    if(branchBound == null){
    		    	appendLine("MettelSimpleTableauManager m = new MettelSimpleTableauManager(tfactory, calculus);");
    		    }else{
    		    	appendLine("int branchBound = 0;");
    		    	appendLine("for("+prefix+MettelJavaNames.firstCharToUpperCase(sort)+" e:list){");
    		    	incrementIndentLevel();
    		    		appendLine("branchBound += "+branchBound.replaceAll("%l", "e.length()")+';');
    		    	decrementIndentLevel();
    		    	appendLine('}');
    		    	appendLine("MettelSmallTableauStateAcceptor acceptor = new MettelSmallTableauStateAcceptor(branchBound);");
    		    	appendLine("MettelSimpleTableauManager m = new MettelSimpleTableauManager(tfactory, calculus,acceptor);");
    		    }
    		    appendLine("final boolean result = m.isSatisfiable(list);");
    		    appendLine("if(result){");
    		    	incrementIndentLevel();
    		    	appendLine("out.println(\"Satisfiable.\");");
    		    	appendLine("out.println(\"Model: \"+m.model());");
    		    	decrementIndentLevel();
    		    appendLine("}else{");
    		    	incrementIndentLevel();
    		    	appendLine("out.println(\"Unsatisfiable.\");");
    		    	appendLine("if(m.contradiction() != null){");
    		    		incrementIndentLevel();
    		    		appendLine("out.println(\"Contradiction: \"+m.contradiction());");
    		    		decrementIndentLevel();
    		    	appendLine('}');
    		    	decrementIndentLevel();
    		    appendLine('}');

    		    appendLine("System.exit(result?1:0);");
    		    decrementIndentLevel();
    		appendLine("} catch(Exception e) {");
    			incrementIndentLevel();
    			appendLine("out.println(\"Sorry! I detected an exceptional situation and terminate now.\");");
	        	appendLine("out.println(\"If you can help me to avoid this situation in future, please look at my error output.\");");
	        	appendLine("err.println(\"==Exception==========================\");");
	        	appendLine("e.printStackTrace(err);");
	        	appendLine("err.println(\"=====================================\");");
	        	appendLine("System.exit(-1);");
	        	decrementIndentLevel();
	        appendLine('}');
	        decrementIndentLevel();
	    appendLine('}');

	}
}
