/**
 * This file is part of MetTeL.
 *
 * MetTeL is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * MetTeL is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with MetTeL.  If not, see <http://www.gnu.org/licenses/>.
 */
package mettel.generator.java;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.PrintWriter;
import mettel.util.MettelJavaNames;
import mettel.util.MettelIndentedStringBuilder;

/**
 * @author Dmitry Tishkovsky
 * @version $Revision$ $Date$
 *
 */
public class MettelFile extends MettelIndentedStringBuilder{

	protected String fileName = null;
	protected String extension = null;

	private MettelJavaPackage pack = null;

	//@SuppressWarnings("unused")
	//private MettelJavaFile(){}

	/**
	 *
	 */
	MettelFile(String fileName, String extension, MettelJavaPackage pack) {
		super(new StringBuilder(), "    ", 0);
		this.fileName = fileName;
		this.extension = extension;
		this.pack = pack;
	}

	//private StringBuilder content = null; //new StringBuilder();

	/* (non-Javadoc)
	 * @see java.lang.Appendable#append(java.lang.CharSequence)
	 */
/*	@Override
	public Appendable append(CharSequence csq){
		return append(csq);
	}
*/

	/* (non-Javadoc)
	 * @see java.lang.Appendable#append(java.lang.CharSequence, int, int)
	 */
/*	@Override
	public Appendable append(CharSequence csq, int start, int end){
		return append(csq, start, end);
	}
*/
	/* (non-Javadoc)
	 * @see java.lang.Appendable#append(char)
	 */
/*	@Override
	public Appendable append(char c){
		return content.append(c);
	}
*/

	private String[] header = {
			"/**",
			" * This file is generated by MetTeL v2",
			" * which is designed and implemented",
			" * by Dmitry Tishkovsky.",
			" */"
	};

	private int isGenerated(String path){

		int result = 0;

		//TODO: check that the code works (ObjectFactory is not rewritten)
		// this occurs if you compile S4 with a property file where there's NO separator specified
		// and later try to compile it again with a property file where there IS separator specified
		// or vice-versa
		try{
			LineNumberReader r = new LineNumberReader(new FileReader(path));
			try{
				for(String s:header){
					if(!s.equals(r.readLine())){
						result = 1;
						break;
					}
				}
			}finally{
				r.close();
			}
		}catch(FileNotFoundException e){
			return -1;
		}catch(IOException e){
			return 2;
		}

		return result;
	}

	public void flush(String outputPath) throws IOException {
		final String fileFullName = MettelJavaNames.addSeparator(outputPath) +
				MettelJavaNames.addSeparator(MettelJavaNames.systemPath(pack != null ? pack.path() : "" )) + fileName +
				((extension == null || extension.equals(""))? "": "." + extension);

		if(isGenerated(fileFullName) <= 0){
			PrintWriter w = new PrintWriter(new FileWriter(fileFullName));
			for(String s:header) w.println(s);
			w.print(toString());
			w.close();
		}else{
			System.out.println("Warning: skipping the file " + fileFullName + ".");
		}
	}

}
