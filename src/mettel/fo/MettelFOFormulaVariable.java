/**
 * This file is generated by MetTeL v2
 * which is designed and implemented
 * by Dmitry Tishkovsky.
 */
package mettel.fo;

import mettel.core.MettelExpression;

public class MettelFOFormulaVariable extends MettelFOAbstractVariable implements MettelFOFormula{

    public MettelFOFormulaVariable(String name, MettelFOObjectFactory factory) {
        super(name, factory);
    }

    int sortId(){ return SORTID; }

    public MettelFOSubstitution match(MettelFOExpression e){
        MettelFOSubstitution s = new MettelFOTreeSubstitution();
        if(match(e,s)){
            return factory.getSubstitution(s);
        }else{ return null; }
    }

    public boolean match(MettelFOExpression e, MettelFOSubstitution s){
        if(!(e instanceof MettelFOFormula)){ return false; }
        return s.append(this,(MettelFOFormula)e);
    }

    public MettelFOExpression rewrite(MettelFOReplacement r) {
        MettelFOFormula e = r.getFormula(this);
        return (e == null) ? this : e;
    }

    public MettelFOExpression substitute(MettelFOSubstitution s) {
        MettelFOFormula e = s.getFormula(this);
        return (e == null) ? this : e;
    }

    private int hashCode = 0;
    public int hashCode(){
        if(hashCode == 0){
            hashCode = 23*SORTID + name.hashCode();
        }
        return hashCode;
    }

    public int compareTo(MettelExpression e){
        if(e instanceof MettelFOFormulaVariable) return name.compareTo(((MettelFOFormulaVariable)e).name());
        if(e instanceof MettelFOFormula) return -1;
        return SORTID - ((MettelFOAbstractExpression)e).sortId();
    }

    public boolean equals(Object o){
        if(o == this){ return true; }
        if(!(o instanceof MettelFOFormulaVariable)){ return false; }
        return name.equals(((MettelFOFormulaVariable)o).name());
    }
    public boolean isEquality(){
        return false;
    }
    public int length(){
        return 1;
    }
}
