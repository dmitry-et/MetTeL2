/**
 * This file is generated by MetTeL v2
 * which is designed and implemented
 * by Dmitry Tishkovsky.
 */
package mettel.fo;

import mettel.core.MettelExpression;

public class MettelFODisjunctionFormula extends MettelFOAbstractExpression implements MettelFOFormula{

    static final int PRIORITY = 5;
    private final int LENGTH;
    protected MettelFOFormula e0 = null;
    protected MettelFOFormula e1 = null;

    public MettelFODisjunctionFormula(MettelFOFormula e0, MettelFOFormula e1, MettelFOObjectFactory f){
        super(f);
        int l = 1;
        this.e0 = e0;
        l += e0.length();
        this.e1 = e1;
        l += e1.length();
        LENGTH = l;
    }

    int sortId(){ return SORTID; }

    int priority(){ return PRIORITY; }

    public int length(){ return LENGTH; }

    public MettelFOSubstitution match(MettelFOExpression e){
        MettelFOSubstitution s = new MettelFOTreeSubstitution();
        if(match(e,s)){
            return factory.getSubstitution(s);
        }else{ return null; }
    }

    public boolean match(MettelFOExpression e, MettelFOSubstitution s){
        if(!(e instanceof MettelFODisjunctionFormula)){ return false;}
        final MettelFODisjunctionFormula ee = (MettelFODisjunctionFormula)e;
        return e0.match(ee.e0, s) && e1.match(ee.e1, s);
    }

    public MettelFOExpression substitute(MettelFOSubstitution s){
        return factory.createDisjunctionFormula((MettelFOFormula)e0.substitute(s), (MettelFOFormula)e1.substitute(s));
    }

    public MettelFOExpression rewrite(MettelFOReplacement s){
        MettelFOExpression e = s.getFormula(this);
        if(e != null){ return e; }
        final MettelFODisjunctionFormula ee = factory.createDisjunctionFormula((MettelFOFormula)e0.rewrite(s), (MettelFOFormula)e1.rewrite(s));
        e = s.getFormula(ee);
        if(e == null){ return ee; }else{ return e; }
    }

    private int hashCode = 0;
    public int hashCode(){
        if(hashCode == 0){
            hashCode = 31*SORTID + PRIORITY;
            hashCode = 31*hashCode + e0.hashCode();
            hashCode = 31*hashCode + e1.hashCode();
        }
        return hashCode;
    }

    public boolean equals(Object o){
        if(o == this){ return true; }
        if(!(o instanceof MettelFODisjunctionFormula)){ return false; }
        MettelFODisjunctionFormula e = (MettelFODisjunctionFormula) o;
        return (e0.equals(e.e0)) && (e1.equals(e.e1));
    }

    public int compareTo(MettelExpression e){
        if(e == this){ return 0; }
        if(!(e instanceof MettelFOFormula)){ return SORTID - ((MettelFOAbstractExpression)e).sortId(); }
        if(e instanceof MettelFOFormulaVariable){ return 1; }
        if(!(e instanceof MettelFODisjunctionFormula)){ return PRIORITY - ((MettelFOAbstractExpression)e).priority(); }
        MettelFODisjunctionFormula ee = (MettelFODisjunctionFormula) e;
        int result = 0;
        result = e0.compareTo(ee.e0);
        if(result != 0){ return result; }
        result = e1.compareTo(ee.e1);
        if(result != 0){ return result; }
        return 0;
    }

    private String str = null;
    public String toString(){
        if(str == null){
            StringBuilder b = new StringBuilder();
            b.append('(');
            b.append(' ');
            b.append(e0);
            b.append(' ');
            b.append('|');
            b.append(' ');
            b.append(e1);
            b.append(' ');
            b.append(')');
            str = b.toString();
        }
        return str;
    }
}
