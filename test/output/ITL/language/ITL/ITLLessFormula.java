//Modified
/**
 * This file is generated by MetTeL v2
 * which is designed and implemented
 * by Dmitry Tishkovsky.
 */
package ITL.language.ITL;

import java.util.Comparator;

import mettel.core.tableau.MettelExpression;

public class ITLLessFormula extends ITLAbstractExpression implements ITLFormula{

    static final int PRIORITY = 2;
    private final int LENGTH;
    protected ITLPoint e0 = null;
    
    public ITLPoint e0(){return e0;}
        
    protected ITLPoint e1 = null;

    public ITLPoint e1(){return e1;}
    
    
    public ITLLessFormula(ITLPoint e0, ITLPoint e1, ITLObjectFactory f){
        super(f);
        int l = 1;
        this.e0 = e0;
        l += e0.length();
        this.e1 = e1;
        l += e1.length();
        LENGTH = l;
    }

    int sortId(){ return SORTID; }

    int priority(){ return PRIORITY; }

    public int length(){ return LENGTH; }

    public ITLSubstitution match(ITLExpression e){
        ITLSubstitution s = new ITLTreeSubstitution();
        if(match(e,s)){
            return factory.getSubstitution(s);
        }else{ return null; }
    }

    public boolean match(ITLExpression e, ITLSubstitution s){
        if(!(e instanceof ITLLessFormula)){ return false;}
        final ITLLessFormula ee = (ITLLessFormula)e;
        return e0.match(ee.e0, s) && e1.match(ee.e1, s);
    }

    public ITLExpression substitute(ITLSubstitution s){
        return factory.createLessFormula((ITLPoint)e0.substitute(s), (ITLPoint)e1.substitute(s));
    }

    public ITLExpression rewrite(ITLReplacement s){
        ITLExpression e = s.getFormula(this);
        if(e != null){ return e; }
        final ITLFormula ee = factory.createLessFormula((ITLPoint)e0.rewrite(s), (ITLPoint)e1.rewrite(s));
        e = s.getFormula(ee);
        if(e == null){ return ee; }else{ return e; }
    }

    private int hashCode = 0;
    public int hashCode(){
        if(hashCode == 0){
            hashCode = 31*SORTID + PRIORITY;
            hashCode = 31*hashCode + e0.hashCode();
            hashCode = 31*hashCode + e1.hashCode();
        }
        return hashCode;
    }

    public boolean equals(Object o){
        if(o == this){ return true; }
        if(!(o instanceof ITLLessFormula)){ return false; }
        ITLLessFormula e = (ITLLessFormula) o;
        return (e0.equals(e.e0)) && (e1.equals(e.e1));
    }

    int compareArgumentsTo(ITLAbstractExpression e, Comparator<ITLAbstractExpression> c){
        int result = 0;
        result = c.compare((ITLAbstractExpression)e0, e);
        if(result >= 0){ return 1; }
        result = c.compare((ITLAbstractExpression)e1, e);
        if(result >= 0){ return 1; }
        return 0;
    }
    int compareArguments(ITLAbstractExpression e, Comparator<ITLAbstractExpression> c){
        final ITLLessFormula ee = (ITLLessFormula)e;
        int result = 0;
        result = c.compare((ITLAbstractExpression)e0, (ITLAbstractExpression)ee.e0);
        if(result != 0){ return result; }
        result = c.compare((ITLAbstractExpression)e1, (ITLAbstractExpression)ee.e1);
        if(result != 0){ return result; }
        return 0;
    }
    public int compareTo(MettelExpression e){
        if(e == this){ return 0; }
        if(!(e instanceof ITLFormula)){ return SORTID - ((ITLAbstractExpression)e).sortId(); }
        if(e instanceof ITLFormulaVariable){ return 1; }
        if(!(e instanceof ITLLessFormula)){ return PRIORITY - ((ITLAbstractExpression)e).priority(); }
        ITLLessFormula ee = (ITLLessFormula) e;
        int result = 0;
        result = e0.compareTo(ee.e0);
        if(result != 0){ return result; }
        result = e1.compareTo(ee.e1);
        if(result != 0){ return result; }
        return 0;
    }


    private String str = null;
    public String toString(){
        if(str == null){
            StringBuilder b = new StringBuilder();
            b.append('(');
            b.append(' ');
            b.append('{');
            b.append(' ');
            b.append(e0);
            b.append(' ');
            b.append('<');
            b.append(' ');
            b.append(e1);
            b.append(' ');
            b.append('}');
            b.append(' ');
            b.append(')');
            str = b.toString();
        }
        return str;
    }
}
